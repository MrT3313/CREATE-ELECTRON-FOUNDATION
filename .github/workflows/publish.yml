# ==================================================================================================
# SUMMARY
# ==================================================================================================
# This workflow handles publishing the package to the NPM registry.
#
# Triggers:
#   - Completion of the 'Core CI' workflow on the 'main' branch.
#   - Manual trigger ('workflow_dispatch') with selectable NPM tag.
#
# Key Steps:
#   1. Set up the environment (checkout code, install Node.js).
#   2. Install dependencies.
#   3. Build the project.
#   4. Determine the NPM tag ('alpha' for CI, user-selected for manual).
#   5. Publish the package to NPM.
# ==================================================================================================

name: Publish Package

on:
  # Trigger for alpha builds on merge to main
  workflow_run:
    workflows: ['E2E Tests']
    types:
      - completed
    branches:
      - main
  # Trigger for manual beta/latest releases from the Actions tab
  workflow_dispatch:
    inputs:
      version_bump:
        description: "What kind of version bump is this? Use 'custom' for a specific version."
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - custom
      specific_version:
        description: "If 'custom', specify the exact version (e.g., 1.2.3)."
        required: false
      tag:
        description: 'NPM tag to publish with'
        required: true
        default: 'beta'
        type: choice
        options:
          - beta
          - latest

jobs:
  wait-for-core-ci:
    uses: ./.github/workflows/reusable-wait-for-core-ci.yml
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    with:
      head_sha: ${{ github.event.workflow_run.head_sha }}
    secrets:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [update-examples]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && needs.update-examples.conclusion == 'success')
    permissions:
      contents: write
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          # Required to allow 'npm version' to create git tags
          fetch-depth: 0
      - name: Read .nvmrc
        id: nvm
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      - name: Bump Version and Publish (Automated Alpha)
        if: github.event_name == 'workflow_run'
        run: |
          git pull --rebase
          npm version prepatch --preid=alpha --git-tag-version=false
          VERSION=$(node -p "require('./package.json').version")
          git commit -am "chore(release): bump version to $VERSION [alpha] [skip ci]"
          git push
          npm publish --tag alpha
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_ACCESS_TOKEN }}
      - name: Bump Version and Publish (Manual Release)
        if: github.event_name == 'workflow_dispatch'
        run: |
          BUMP_TYPE=${{ github.event.inputs.version_bump }}
          NPM_TAG=${{ github.event.inputs.tag }}
          VERSION_ARG="$BUMP_TYPE"

          if [ "$BUMP_TYPE" = "custom" ]; then
            VERSION_ARG="${{ github.event.inputs.specific_version }}"
            if [ -z "$VERSION_ARG" ]; then
              echo "Error: 'specific_version' must be provided when 'custom' is selected."
              exit 1
            fi
          fi

          COMMIT_MESSAGE="chore(release): bump version to %s [$NPM_TAG]"

          if [ "$NPM_TAG" = "beta" ]; then
            if [ "$BUMP_TYPE" != "custom" ]; then
              npm version "pre$BUMP_TYPE" --preid=beta -m "$COMMIT_MESSAGE"
            else
              npm version "$VERSION_ARG" -m "$COMMIT_MESSAGE"
            fi
          else
            npm version "$VERSION_ARG" -m "$COMMIT_MESSAGE"
          fi

          git push --follow-tags
          npm publish --tag "$NPM_TAG"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_REGISTRY_ACCESS_TOKEN }}

  update-examples:
    name: Update Examples
    runs-on: ubuntu-latest
    needs: [wait-for-core-ci]
    # Only run for automated workflow_run triggers, not manual dispatches.
    if: always() # This job must always run to satisfy the dependency from the 'publish' job.
    permissions:
      contents: write # Required to push changes to the repository.
      actions: read # Required to read artifacts from other workflows.
    steps:
      # 1. Check out the repository code.
      - name: Early exit for manual dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo "Skipping example update for manual dispatch."

      - name: Checkout Repository
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show initial state of examples
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "Initial contents of DOCS/examples:"
          ls -R DOCS/examples || echo "DOCS/examples does not exist, which is normal on a clean checkout."
      # 2. Clean the examples directory before downloading new artifacts.
      - name: Clean Examples Directory
        if: github.event_name != 'workflow_dispatch'
        run: |
          rm -rf DOCS/examples && mkdir -p DOCS/examples
          echo "Contents of DOCS/examples after cleaning:"
          ls -R DOCS/examples
      # 3. Download all artifacts from the triggering 'e2e-test' workflow job.
      - name: Download Example Artifacts
        if: github.event_name != 'workflow_dispatch'
        uses: actions/download-artifact@v4
        with:
          path: DOCS/examples
          # Explicitly specify the triggering workflow run ID to get its artifacts.
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Downloaded Artifacts
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "Verifying downloaded artifact contents:"
          ls -RF DOCS/examples
          if [ -z "$(ls -A DOCS/examples)" ]; then
            echo "::error::Downloaded examples directory is empty. Artifacts may not have been found or downloaded correctly. Halting workflow."
            exit 1
          fi
          echo "âœ… Downloaded examples are present. Proceeding."
      # 4. Configure Git with credentials for the github-actions bot.
      - name: Configure Git
        if: github.event_name != 'workflow_dispatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check Git Status Before Commit
        if: github.event_name != 'workflow_dispatch'
        run: git status
      # 5. Commit and push the updated examples to the repository.
      - name: Commit Updated Examples
        if: github.event_name != 'workflow_dispatch'
        run: |
          git add -f DOCS/examples
          # Check if there are any changes to commit
          if git diff-index --quiet HEAD; then
            echo "No changes to commit."
          else
            echo "Changes detected, committing now..."
            git commit -m "chore(examples): update /DOCS/examples from e2e tests" -m "[skip ci]"
            git push
          fi
