# ==================================================================================================
# SUMMARY
# ==================================================================================================
# This file defines the End-to-End (E2E) testing workflow for the CLI project.
#
# Purpose:
#   1. Test the complete functionality of the CLI tool by scaffolding new projects with various
#      feature combinations and validating their integrity and structure.
#   2. Keep the /DOCS/examples directory in sync with actual CLI output by updating examples
#      only when changes are merged to main.
#
# Triggers:
#   - Pull Requests: Activates on pull requests to the 'main' branch that modify files within
#     the 'cli/**' directory or this workflow file itself. Runs tests and validation only.
#   - Push to Main: Activates when changes are merged/pushed to main. Runs tests, validation,
#     and updates examples with fresh CLI output.
#   - Manual Dispatch: Can be triggered manually from the GitHub Actions UI. Runs tests and
#     validation only (no example updates).
#
# Workflow Behavior:
#   - On PRs: Tests CLI functionality, validates output structure (no example updates)
#   - On Push to Main: Tests CLI functionality, validates output, updates examples, commits changes
#   - On Manual Trigger: Tests CLI functionality, validates output structure (no example updates)
#
# Job: e2e-test
#   The workflow consists of a single job, 'e2e-test', which runs on 'ubuntu-latest'.
#   It leverages a matrix strategy to execute tests across 8 different configurations,
#   covering combinations of routers, styling options, databases, and ORMs.
#
#   Matrix Configurations:
#     - tanstack-router (with/without tailwind, with/without sqlite+drizzle)
#     - react-router (with/without tailwind, with/without sqlite+drizzle)
#
# Key Steps for each matrix combination:
#   1. Setup Environment: Checks out the repository, sets up the Node.js environment based on
#      the '.nvmrc' file, and installs dependencies for the CLI.
#   2. Build CLI: Compiles the CLI tool by running the 'npm run build' command.
#   3. Scaffold Test Project: Executes the compiled CLI with flags corresponding to the
#      current matrix configuration (e.g., router, styles). This generates a new project
#      in a temporary directory.
#   4. Update Examples (Push to Main Only): Copies the generated project to the appropriate
#      /DOCS/examples directory to keep examples in sync with actual CLI output.
#   5. Validate Scaffolded Project: Performs comprehensive checks to ensure the scaffolded
#      project has the correct file structure based on the selected options:
#        - Essential files: package.json, electron.d.ts, index.html
#        - TanStack Router: src/routes/__root.tsx, src/routes/index.tsx
#        - React Router: src/App.tsx, src/routes/index.tsx
#        - Tailwind CSS: tailwind.config.ts
#        - Drizzle ORM: drizzle.config.ts
#   6. Configure Git (Push to Main Only): Sets up git configuration for automated commits.
#   7. Commit Updated Examples (Push to Main Only): Commits the updated examples back to the
#      repository with descriptive commit messages including [skip ci] to prevent loops.
#
# Conditional Logic:
#   Steps 4, 6, and 7 only execute when:
#   - github.event_name == 'push' AND github.ref == 'refs/heads/main'
#   This ensures examples are only updated when changes are actually merged, not on every test run.
#
# This E2E setup ensures that:
#   - The CLI can reliably generate valid project structures for all supported feature combinations
#   - Examples stay perfectly in sync with actual CLI output
#   - PRs are thoroughly tested without side effects
#   - The main branch always has up-to-date examples
# ==================================================================================================

name: E2E Tests # displayed on the GitHub Actions UI.

# 1. üëÄ CONFIGURE: workflow triggers
on:
  # 1.
  # Allows manual triggering of the workflow from the GitHub Actions UI.
  workflow_dispatch:

  # 2. Pull Requests | branches: [main]
  pull_request:
    branches:
      - main # ONLY run on PRs targeting the main branch
    # ONLY trigger if files change in CLI code.
    paths:
      - 'cli/**' # matches the directory of your CLI source code.
      - '.github/workflows/e2e.yml' # Also run if the E2E workflow file itself changes.

  # 3. Push to main (when PRs are merged)
  push:
    branches:
      - main
    # ONLY trigger if files change in CLI code.
    paths:
      - 'cli/**' # matches the directory of your CLI source code.
      - '.github/workflows/e2e.yml' # Also run if the E2E workflow file itself changes.

  # 4. Scheduled CRON
  # schedule:
  #   - cron: '0 0 * * *' # Example: Runs every day at midnight UTC.

# 2. üëÄ Defines the jobs for this workflow.
jobs:
  e2e-test:
    name: E2E Test - ${{ matrix.config.name }}
    # Specifies the type of runner for this job, using a matrix variable.
    runs-on: ${{ matrix.config.os }}
    # Grant permissions for the workflow to create commits and push changes
    permissions:
      contents: write

    ###########################################################################
    # ‚≠êÔ∏è
    # CONFIGURE: workflow strategy for running the job multiple times with different configurations.
    ###########################################################################
    strategy:
      # If true: GitHub cancels all in-progress jobs in the matrix if any job fails.
      # if false: allows all jobs to complete.
      fail-fast: true

      # CONFIGURE: matrix of run configurations.
      matrix:
        # Defines the specific CLI feature combinations to test.
        config:
          # 0. DEFAULT
          - name: 'Tanstack Router, Tailwind, SQLite, Drizzle'
            os: ubuntu-latest
            router: 'tanstack-router'
            styles: 'tailwind'
            db: 'sqlite'
            orm: 'drizzle'
            example_dir: 'tanstack-router-tailwind-sqlite-drizzle'

          # 1. Tanstack Router
          - name: 'Tanstack Router, Tailwind'
            os: ubuntu-latest
            router: 'tanstack-router'
            styles: 'tailwind'
            db: 'none'
            orm: 'none'
            example_dir: 'tanstack-router-tailwind'
          - name: 'Tanstack Router, No Styles'
            os: ubuntu-latest
            router: 'tanstack-router'
            styles: 'none'
            db: 'none'
            orm: 'none'
            example_dir: 'tanstack-router'
          - name: 'Tanstack Router, No Styles, SQLite, Drizzle'
            os: ubuntu-latest
            router: 'tanstack-router'
            styles: 'none'
            db: 'sqlite'
            orm: 'drizzle'
            example_dir: 'tanstack-router-sqlite-drizzle'

          # 2. React Router
          - name: 'React Router, Tailwind'
            os: ubuntu-latest
            router: 'react-router'
            styles: 'tailwind'
            db: 'none'
            orm: 'none'
            example_dir: 'react-router-tailwind'
          - name: 'React Router, No Styles'
            os: ubuntu-latest
            router: 'react-router'
            styles: 'none'
            db: 'none'
            orm: 'none'
            example_dir: 'react-router'
          - name: 'React Router, Tailwind, SQLite, Drizzle'
            os: ubuntu-latest
            router: 'react-router'
            styles: 'tailwind'
            db: 'sqlite'
            orm: 'drizzle'
            example_dir: 'react-router-tailwind-sqlite-drizzle'
          - name: 'React Router, No Styles, SQLite, Drizzle'
            os: ubuntu-latest
            router: 'react-router'
            styles: 'none'
            db: 'sqlite'
            orm: 'drizzle'
            example_dir: 'react-router-sqlite-drizzle'

    ###########################################################################
    # ‚≠êÔ∏è
    # CONFIGURE: individual job steps to execute for each matrix combination.
    ###########################################################################
    steps:
      # 1. Check out the repository code.
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Required to allow pushing changes back to the repository
          fetch-depth: 0

      # 2. Read Node.js version from .nvmrc file
      - name: Read .nvmrc
        id: nvm
        run: echo "NODE_VERSION=$(cat .nvmrc)" >> $GITHUB_OUTPUT

      # 3. Setup the environment using the local composite action (./github/actions/setup/action.yml).
      - name: Setup Environment
        uses: ./.github/actions/setup # Path to your local composite action.
        with:
          # Input: Specify the Node.js version for the setup action, read from .nvmrc
          node-version: ${{ steps.nvm.outputs.NODE_VERSION }}

      # 4. Build the CLI.
      # Run the "build" script from your root package.json.
      # job will target the cli/dist/index.js file later.
      - name: Build CLI
        run: npm run build

      #########################################################
      # Step 5: Scaffold a test project using the CLI.
      #########################################################
      - name: Scaffold Test Project (using ${{ matrix.config.name }})
        run: |
          set -x

          # Verify CLI binary exists
          echo "Checking CLI binary:"
          ls -la cli/dist/index.js || echo "‚ùå CLI binary not found"
          echo "Node.js version:"
          node --version
          echo "NPM version:"
          npm --version

          # Create a temporary directory for the scaffolded project.
          mkdir temp-scaffolded-project

          # Construct the project name for uniqueness.
          project_name="tp" # test-project
          if [[ "${{ matrix.config.router }}" == "tanstack-router" ]]; then
            project_name+="-tanstk"
          elif [[ "${{ matrix.config.router }}" == "react-router" ]]; then
            project_name+="-reactr"
          fi

          if [[ "${{ matrix.config.styles }}" == "tailwind" ]]; then
            project_name+="-tw"
          fi

          if [[ "${{ matrix.config.db }}" == "sqlite" ]]; then
            project_name+="-sql"
          fi

          if [[ "${{ matrix.config.orm }}" == "drizzle" ]]; then
            project_name+="-driz"
          fi

          echo "PROJECT_NAME=$project_name" >> $GITHUB_ENV

          # Construct arguments, only adding them if they are not 'none'.
          args=()
          args+=("--router=${{ matrix.config.router }}")
          if [[ "${{ matrix.config.styles }}" != "none" ]]; then
            args+=("--styles=${{ matrix.config.styles }}")
          fi
          if [[ "${{ matrix.config.db }}" != "none" ]]; then
            args+=("--database=${{ matrix.config.db }}")
          fi
          if [[ "${{ matrix.config.orm }}" != "none" ]]; then
            args+=("--orm=${{ matrix.config.orm }}")
          fi
          args+=("--ci")
          args+=("--ide=none")
          args+=("--install_packages=none")
          args+=("--initialize_git=none")

                    # Execute the CLI to scaffold a new project.
          echo "Executing CLI with command:"
          echo "node cli/dist/index.js \"$project_name\" ${args[@]}"
          echo "Arguments: ${args[@]}"

          # Run the CLI and capture both stdout and stderr
          if node cli/dist/index.js "$project_name" "${args[@]}"; then
            echo "‚úÖ CLI command completed successfully"
          else
            echo "‚ùå CLI command failed with exit code $?"
            echo "Listing current directory contents:"
            ls -la
            echo "Listing temp-scaffolded-project contents:"
            ls -la temp-scaffolded-project/ || echo "temp-scaffolded-project directory not found"
            exit 1
          fi

          # Move the created project to our temp directory
          if [ -d "./$project_name" ]; then
            echo "‚úÖ Project directory created successfully, moving to temp directory"
            mv "./$project_name" "./temp-scaffolded-project/$project_name"
            echo "Contents of moved project:"
            ls -la "./temp-scaffolded-project/$project_name"
          else
            echo "‚ùå Project directory was not created by CLI"
            echo "Expected: ./$project_name"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

      - name: Verify Contents Before Upload
        run: |
          ARTIFACT_DIR="temp-scaffolded-project/${{ env.PROJECT_NAME }}"
          echo "Verifying contents of $ARTIFACT_DIR before upload:"
          ls -R "$ARTIFACT_DIR"
          if [ -z "$(ls -A "$ARTIFACT_DIR")" ]; then
            echo "::error::Artifact directory is empty. Halting workflow."
            exit 1
          fi
          echo "‚úÖ Artifact directory is not empty. Proceeding with upload."

      # ------------------------------------------------------------------------------------------
      # UPLOAD ARTIFACT
      # ------------------------------------------------------------------------------------------
      # On pushes to main, upload the generated example directory as an artifact.
      # This allows a separate job to collect all examples and commit them at once,
      # avoiding race conditions from multiple jobs pushing to the same branch.
      - name: Upload Example Artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.example_dir }}
          path: temp-scaffolded-project/${{ env.PROJECT_NAME }}

      - name: Validate Artifact Upload
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Validating that artifact '${{ matrix.config.example_dir }}' was uploaded successfully..."
          gh api \
            /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
            | jq -e '.artifacts[] | select(.name == "${{ matrix.config.example_dir }}")'

          if [ $? -ne 0 ]; then
            echo "::error::Validation failed. Artifact '${{ matrix.config.example_dir }}' not found via API after upload."
            exit 1
          fi
          echo "‚úÖ Artifact '${{ matrix.config.example_dir }}' successfully validated via API."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #########################################################
      # Step 7: Validate the scaffolded project.
      #########################################################
      - name: Verify Project Structure
        run: |
          set -x

          GENERATED_PROJECT="temp-scaffolded-project/${{ env.PROJECT_NAME }}"

          echo "Verifying project structure for ${{ matrix.config.name }}..."
          echo "Generated project path: $GENERATED_PROJECT"
          echo "Project name: ${{ env.PROJECT_NAME }}"

          # Debug: List what's actually in the temp directory
          echo "Contents of temp-scaffolded-project:"
          ls -la temp-scaffolded-project/ || echo "temp-scaffolded-project directory not found"

          # Basic structure validation
          if [ ! -d "$GENERATED_PROJECT" ]; then
            echo "‚ùå Generated project directory not found!"
            echo "Expected: $GENERATED_PROJECT"
            exit 1
          fi

          # Check for essential files
          essential_files=("package.json" "electron.d.ts" "index.html")
          for file in "${essential_files[@]}"; do
            if [ ! -f "$GENERATED_PROJECT/$file" ]; then
              echo "‚ùå Essential file missing: $file"
              exit 1
            else
              echo "‚úÖ Found: $file"
            fi
          done

          # Router-specific validation
          if [[ "${{ matrix.config.router }}" == "tanstack-router" ]]; then
            if [ ! -f "$GENERATED_PROJECT/src/routes/__root.tsx" ]; then
              echo "‚ùå TanStack Router file missing: src/routes/__root.tsx"
              exit 1
            else
              echo "‚úÖ Found TanStack Router files"
            fi
          elif [[ "${{ matrix.config.router }}" == "react-router" ]]; then
            if [ ! -f "$GENERATED_PROJECT/src/App.tsx" ]; then
              echo "‚ùå React Router file missing: src/App.tsx"
              exit 1
            else
              echo "‚úÖ Found React Router files"
            fi
          fi

          # Tailwind validation
          if [[ "${{ matrix.config.styles }}" == "tailwind" ]]; then
            if [ ! -f "$GENERATED_PROJECT/tailwind.config.ts" ]; then
              echo "‚ùå Tailwind config missing: tailwind.config.ts"
              exit 1
            else
              echo "‚úÖ Found Tailwind config"
            fi
          fi

          # Database/ORM validation
          if [[ "${{ matrix.config.db }}" == "sqlite" && "${{ matrix.config.orm }}" == "drizzle" ]]; then
            if [ ! -f "$GENERATED_PROJECT/drizzle.config.ts" ]; then
              echo "‚ùå Drizzle config missing: drizzle.config.ts"
              exit 1
            else
              echo "‚úÖ Found Drizzle config"
            fi
          fi

          echo "‚úÖ Project structure validation passed for ${{ matrix.config.name }}"
